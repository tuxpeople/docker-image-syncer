name: "CI: Build & Test"

on:
  workflow_call:
    inputs:
      build_version:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: true
      YTTOKEN:
        required: true
  workflow_dispatch:

env:
  UPSTREAM_GITHUB_REPOSITORY: "AliyunContainerService/image-syncer"                         # Upstream repo

jobs:
  quick-build:
    runs-on: ubuntu-latest
    outputs:
      imagename: ${{ env.imagename }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      -
        name: Prepare
        id: prep
        run: |
          IMAGENAME="ttl.sh/$(uuidgen | tr '[:upper:]' '[:lower:]'):3h"
          echo "imagename=${IMAGENAME}" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@18ce135bb5112fa8ce4ed6c17ab05699d7f3a5e0 # v3
      -
        name: Build and export
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          push: true
          tags: ${{ env.imagename }}
          build-args: |
            UPSTREAM_VERSION=${{ inputs.build_version }}

  snyk-scan:
    needs: [quick-build]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      -
        name: Pull docker image
        id: load
        run: |
          docker pull ${{needs.quick-build.outputs.imagename}}
      -
        name: Test the image with Snyk for high-severity vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{needs.quick-build.outputs.imagename}}
          args: --file=Dockerfile --severity-threshold=high

  function-test:
    needs: [quick-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Pull docker image
        id: load
        run: |
          docker pull ${{needs.quick-build.outputs.imagename}}
      - name: Run image-syncer
        run: |
          sudo apt-get install -y moreutils
          export IMAGE_SYNCER_IMAGE=${{needs.quick-build.outputs.imagename}}
          envsubst < docker-compose.yml | sponge docker-compose.yml
          docker-compose up -d
          until docker-compose logs image-syncer | grep "Synchronization finished"
          do
            echo "Waiting for sync to finish"
            sleep 2
          done
      - name: Use docker to check result
        run: |
          docker pull 127.0.0.1:5000/image-syncer-test/alpine:3.18.2 &&
          docker pull 127.0.0.1:5000/image-syncer-test/olm:v0.18.3 &&
          docker pull 127.0.0.1:5000/image-syncer-test/hybridnet:v0.8.2 &&
          docker pull 127.0.0.1:5000/image-syncer-test/hybridnet@sha256:14b267eb38aa85fd12d0e168fffa2d8a6187ac53a14a0212b0d4fce8d729598c &&
          docker pull 127.0.0.1:5000/image-syncer-test/hybridnet:v0.8.2-test